apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mimir-rls.fullname" . }}
  labels:
    {{- include "mimir-rls.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mimir-rls.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mimir-rls.selectorLabels" . | nindent 8 }}
      annotations:
        {{- if .Values.serviceMonitor.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.ports.metrics }}"
        prometheus.io/path: "/metrics"
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "mimir-rls.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: rls
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: ext-authz
              containerPort: {{ .Values.service.ports.extAuthz }}
            - name: ratelimit
              containerPort: {{ .Values.service.ports.rateLimit }}
            - name: admin
              containerPort: {{ .Values.service.ports.admin }}
            - name: metrics
              containerPort: {{ .Values.service.ports.metrics }}
          args:
            # Server ports
            - "--ext-authz-port={{ .Values.service.ports.extAuthz }}"
            - "--rate-limit-port={{ .Values.service.ports.rateLimit }}"
            - "--admin-port={{ .Values.service.ports.admin }}"
            - "--metrics-port={{ .Values.service.ports.metrics }}"
            
            # Tenant and request configuration
            - "--tenant-header={{ .Values.tenantHeader }}"
            - "--enforce-body-parsing={{ .Values.limits.enforceBodyParsing }}"
            - "--max-request-bytes={{ .Values.limits.maxRequestBytes | default "4194304" }}"
            - "--failure-mode-allow={{ .Values.limits.failureModeAllow | default false }}"
            
            # Default tenant limits
            - "--default-samples-per-second={{ .Values.limits.defaultSamplesPerSecond }}"
            - "--default-burst-percent={{ .Values.limits.defaultBurstPercent }}"
            - "--default-max-body-bytes={{ .Values.limits.maxBodyBytes | default 4194304 }}"
            - "--default-max-labels-per-series={{ .Values.limits.defaultMaxLabelsPerSeries | default 60 }}"
            - "--default-max-label-value-length={{ .Values.limits.defaultMaxLabelValueLength | default 2048 }}"
            - "--default-max-series-per-request={{ .Values.limits.defaultMaxSeriesPerRequest | default 100000 }}"
            
            # Selective enforcement configuration
            - "--enforce-samples-per-second={{ .Values.enforcement.enforceSamplesPerSecond }}"
            - "--enforce-max-body-bytes={{ .Values.enforcement.enforceMaxBodyBytes }}"
            - "--enforce-max-labels-per-series={{ .Values.enforcement.enforceMaxLabelsPerSeries }}"
            - "--enforce-max-series-per-request={{ .Values.enforcement.enforceMaxSeriesPerRequest }}"
            - "--enforce-max-series-per-metric={{ .Values.enforcement.enforceMaxSeriesPerMetric }}"
            - "--enforce-bytes-per-second={{ .Values.enforcement.enforceBytesPerSecond }}"
            
            # Store configuration
            - "--store-backend={{ .Values.store.backend }}"
            {{- if eq .Values.store.backend "redis" }}
            {{- if eq .Values.redis.mode "external" }}
            - "--redis-address={{ .Values.redis.external.address }}"
            {{- else }}
            - "--redis-address=localhost:6379"
            {{- end }}
            {{- end }}
            
            # Mimir configuration for direct integration
            - "--mimir-host={{ .Values.mimir.host }}"
            - "--mimir-port={{ .Values.mimir.port }}"
            
            # Logging
            - "--log-level={{ .Values.log.level }}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: admin
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /readyz
              port: admin
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if and .Values.redis.enabled (eq .Values.redis.mode "sidecar") .Values.redis.sidecar.persistence.enabled }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
          {{- end }}
        {{- if and .Values.redis.enabled (eq .Values.redis.mode "sidecar") }}
        - name: redis
          image: "{{ .Values.redis.sidecar.image.repository }}:{{ .Values.redis.sidecar.image.tag }}"
          imagePullPolicy: {{ .Values.redis.sidecar.image.pullPolicy }}
          securityContext:
            {{- with .Values.redis.sidecar.securityContext }}
            runAsNonRoot: {{ .runAsNonRoot }}
            runAsUser: {{ .runAsUser }}
            {{- end }}
          ports:
            - name: redis
              containerPort: 6379
          command:
            - redis-server
            - --appendonly
            - "{{ if .Values.redis.sidecar.persistence.enabled }}yes{{ else }}no{{ end }}"
            - --maxmemory
            - "{{ .Values.redis.sidecar.config.maxmemory | default "800mb" }}"
            - --maxmemory-policy
            - "{{ .Values.redis.sidecar.config.maxmemoryPolicy | default "allkeys-lru" }}"
            {{- if .Values.redis.sidecar.config.save }}
            {{- range .Values.redis.sidecar.config.save }}
            - --save
            - "{{ . }}"
            {{- end }}
            {{- end }}
            - --timeout
            - "{{ .Values.redis.sidecar.config.timeout | default "300" }}"
            - --tcp-keepalive
            - "{{ .Values.redis.sidecar.config.tcpKeepalive | default "300" }}"
            - --protected-mode
            - "{{ .Values.redis.sidecar.config.protectedMode | default "yes" }}"
            - --tcp-backlog
            - "{{ .Values.redis.sidecar.config.tcpBacklog | default "511" }}"
            - --databases
            - "{{ .Values.redis.sidecar.config.databases | default "16" }}"
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.redis.sidecar.resources | nindent 12 }}
          {{- if .Values.redis.sidecar.persistence.enabled }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
          {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.redis.enabled (eq .Values.redis.mode "sidecar") .Values.redis.sidecar.persistence.enabled }}
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: {{ include "mimir-rls.fullname" . }}-redis-data
      {{- end }}

