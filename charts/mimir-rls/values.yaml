# Default values for mimir-rls
# This is a YAML-formatted file.

# Service configuration
service:
  type: ClusterIP
  ports:
    extAuthz: 8080
    rateLimit: 8081
    admin: 8082
    metrics: 9090

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Listen configuration
listen:
  extAuthz: ":8080"
  rateLimit: ":8081"
  admin: ":8082"
  metrics: ":9090"

# Limits configuration
limits:
  # To enforce only tenants present in the ConfigMap by default, keep defaults at 0 (disabled)
  defaultSamplesPerSecond: 0    # 0 means no default cap; limits must come from ConfigMap
  defaultBurstPercent: 0        # unused until samples_per_second > 0
  enforceBodyParsing: true      # parsing can stay enabled for metrics/visibility
  
  # ðŸ”§ FIX: Add missing RLS configuration options that were causing tenant discovery to fail
  maxBodyBytes: 0               # 0 means no default body size cap (tenant-specific limits from ConfigMap)
  maxRequestBytes: "4194304"    # 4 MiB - Maximum request body size for gRPC (global safety limit) - quoted string
  failureModeAllow: false       # Fail closed for security (set true for debugging)
  defaultMaxLabelsPerSeries: 60
  defaultMaxLabelValueLength: 2048
  defaultMaxSeriesPerRequest: 100000

# Selective enforcement configuration
enforcement:
  enabled: true
  # Cardinality limits - ENFORCED
  enforceMaxSeriesPerRequest: true   # per_metric_series_limit
  enforceMaxLabelsPerSeries: false   # per_user_series_limit - DISABLED
  # Rate limiting - DISABLED
  enforceSamplesPerSecond: false     # No rate limiting
  enforceBytesPerSecond: false       # No bytes rate limiting
  # Body size - DISABLED
  enforceMaxBodyBytes: false         # No body size enforcement

# Store configuration
store:
  backend: "redis"  # memory or redis - Use redis for shared state in production
  redis:
    address: "localhost:6379"
    tls:
      enabled: false
      caCert: ""
      clientCert: ""
      clientKey: ""

# Redis configuration for shared state
redis:
  enabled: true
  image:
    repository: redis
    tag: "7.2-alpine"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
  persistence:
    enabled: false  # Set to true for production with persistent storage
    size: 1Gi
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    fsGroup: 999

# Logging configuration
log:
  level: "info"

# Deployment configuration
replicaCount: 1

image:
  repository: ghcr.io/akshaydubey29/mimir-rls
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Additional environment variables
env: []

# Additional volume mounts
volumeMounts: []

# Additional volumes
volumes: [] 