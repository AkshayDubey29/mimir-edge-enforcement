# Default values for mimir-envoy
# This is a YAML-formatted file.

# Deployment configuration
replicaCount: 1

nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  port: 8080
  type: ClusterIP
  annotations: {}
  # nodePort: 30080  # Specify for NodePort service
  # loadBalancerIP: ""  # Specify for LoadBalancer service
  # loadBalancerSourceRanges: []  # Restrict LoadBalancer access

# Remote write configuration
remoteWrite:
  path: "/api/v1/push"

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Mimir distributor configuration
mimir:
  distributorHost: "mimir-distributor.mimir.svc.cluster.local"
  distributorPort: 8080

# RLS service configuration
rls:
  host: "mimir-rls.mimir-edge-enforcement.svc.cluster.local"
  extAuthzPort: 8080
  rateLimitPort: 8081

# External authorization configuration
extAuthz:
  maxRequestBytes: 4194304  # 4 MiB
  failureModeAllow: false
  # ðŸ”§ FIX: Buffer and timeout settings to prevent overflow
  bufferSizeBytes: 131072   # 128KB (double the default 64KB)
  timeout: "5s"             # Overall ext_authz timeout
  grpcTimeout: "4s"         # gRPC call timeout (should be less than overall timeout)

# Rate limiting configuration
rateLimit:
  failureModeDeny: true
  domain: "mimir_remote_write"
  # ðŸ”§ FIX: Add timeout settings for rate limit service
  timeout: "3s"             # Overall rate limit timeout
  grpcTimeout: "2s"         # gRPC call timeout

# Proxy configuration
proxy:
  upstreamTimeout: "30s"
  # HTTP protocol settings (fixes 426 Upgrade Required errors)
  httpProtocol:
    # Accept HTTP/1.0 and HTTP/1.1 from downstream (NGINX)
    acceptHttp10: true
    # Use remote address from NGINX proxy
    useRemoteAddress: true
    # Number of trusted hops for X-Forwarded-For
    xffNumTrustedHops: 1

# Resource limits and overload management
resourceLimits:
  # ðŸ”§ FIX: Maximum heap size (should be ~75% of container memory limit)
  # For 512Mi container limit: ~384MB (75% of 512Mi = 384MB)
  maxHeapSizeBytes: 402653184  # 384 MiB (75% of 512Mi container limit)
  
  # Heap-based overload thresholds (0.0 - 1.0)
  shrinkHeapThreshold: 0.8           # Start shrinking heap at 80%
  heapStopAcceptingThreshold: 0.95   # Stop accepting requests at 95% heap

image:
  repository: ghcr.io/AkshayDubey29/mimir-envoy
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# ConfigMap for Envoy configuration
configMap:
  create: true
  name: ""

# Additional environment variables
env: []

# Additional volume mounts
volumeMounts: []

# Additional volumes
volumes: [] 