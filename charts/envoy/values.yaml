# Default values for mimir-envoy - Production Configuration
# This is a YAML-formatted file.

# Deployment configuration
replicaCount: 3  # Production: Multiple replicas for high availability

nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  port: 8080
  type: ClusterIP
  annotations: {}
  # nodePort: 30080  # Specify for NodePort service
  # loadBalancerIP: ""  # Specify for LoadBalancer service
  # loadBalancerSourceRanges: []  # Restrict LoadBalancer access

# Remote write configuration
remoteWrite:
  path: "/api/v1/push"

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Mimir distributor configuration
mimir:
  distributorHost: "mimir-distributor.mimir.svc.cluster.local"
  distributorPort: 8080

# RLS service configuration
rls:
  host: "mimir-rls.mimir-edge-enforcement.svc.cluster.local"
  extAuthzPort: 8080
  rateLimitPort: 8081

# External authorization configuration
extAuthz:
  maxRequestBytes: 10485760  # 10 MiB - Increased for large payloads
  failureModeAllow: true     # Production: Allow requests when authorization fails
  timeout: "10s"             # gRPC service timeout

# Rate limiting configuration
rateLimit:
  failureModeDeny: true
  domain: "mimir_remote_write"
  grpcTimeout: "5s"          # gRPC call timeout

# RLS Fallback configuration - Production Reliability
rlsFallback:
  enabled: true                    # Enable fallback to Mimir distributor
  triggerStatusCodes: ["503"]      # Status codes that trigger fallback
  maxRetries: 1                    # Number of retries before fallback
  retryTimeout: "5s"               # Timeout for retry attempts
  fallbackTimeout: "30s"           # Timeout for fallback requests
  logFallbackEvents: true          # Log fallback events for monitoring
  addFallbackHeaders: true         # Add headers to track fallback usage

# Proxy configuration
proxy:
  upstreamTimeout: "30s"
  # HTTP protocol settings
  httpProtocol:
    # Accept HTTP/1.0 and HTTP/1.1 from downstream
    acceptHttp10: true
    # Use remote address from proxy
    useRemoteAddress: true
    # Number of trusted hops for X-Forwarded-For
    xffNumTrustedHops: 1

# Logging configuration - Production
logging:
  level: "info"                # Production logging level
  enableAccessLogs: true       # Enable HTTP access logs
  enableDebugLogs: false       # Disable debug logging for performance
  enableDetailedLogs: false    # Disable detailed filter logs for performance

# Resource limits and overload management
resourceLimits:
  # Maximum heap size (should be ~75% of container memory limit)
  maxHeapSizeBytes: 1610612736  # 1.5 GiB (75% of 2Gi container limit) - Optimized for production
  
  # Heap-based overload thresholds (0.0 - 1.0)
  shrinkHeapThreshold: 0.8           # Start shrinking heap at 80%
  heapStopAcceptingThreshold: 0.95   # Stop accepting requests at 95% heap

image:
  repository: ghcr.io/akshaydubey29/mimir-envoy
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations - Production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9901"
  prometheus.io/path: "/stats"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Resource configuration - Production
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

nodeSelector: {}

tolerations: []

# Affinity - Production ready
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - mimir-envoy
        topologyKey: kubernetes.io/hostname

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 2  # Ensure at least 2 pods are always available

# Network Policy
networkPolicy:
  enabled: true

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true  # Enable ServiceMonitor for production monitoring
  interval: 30s
  scrapeTimeout: 10s

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# ConfigMap for Envoy configuration
configMap:
  create: true
  name: ""

# Additional environment variables
env: []

# Additional volume mounts
volumeMounts: []

# Additional volumes
volumes: []

# Liveness and readiness probes - Production
livenessProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe
startupProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30 