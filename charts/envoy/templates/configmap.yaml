{{- if .Values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mimir-envoy.fullname" . }}-config
  labels:
    {{- include "mimir-envoy.labels" . | nindent 4 }}
data:
  envoy.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
      # ðŸ”§ DEBUG: Add more admin endpoints for troubleshooting
      access_log:
        - name: envoy.access_loggers.stdout
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
            log_format:
              text_format: "[%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_SENT% %DURATION% %REQ(X-FORWARDED-FOR)% %REQ(USER-AGENT)% %REQ(X-REQUEST-ID)% %REQ(:AUTHORITY)% %UPSTREAM_HOST%\n"

    # Overload manager with memory monitoring (compatible with all Envoy versions)
    overload_manager:
      refresh_interval: 0.25s
      resource_monitors:
      - name: "envoy.resource_monitors.fixed_heap"
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
          max_heap_size_bytes: {{ .Values.resourceLimits.maxHeapSizeBytes | int }}
      actions:
      - name: "envoy.overload_actions.stop_accepting_requests"
        triggers:
        - name: "envoy.resource_monitors.fixed_heap"
          threshold:
            value: {{ .Values.resourceLimits.heapStopAcceptingThreshold }}
      - name: "envoy.overload_actions.shrink_heap"
        triggers:
        - name: "envoy.resource_monitors.fixed_heap"
          threshold:
            value: {{ .Values.resourceLimits.shrinkHeapThreshold }}

    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.service.port | int }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              # ðŸ”§ FIX: Accept HTTP/1.1 from NGINX (prevents 426 Upgrade Required errors)
              http_protocol_options:
                accept_http_10: {{ .Values.proxy.httpProtocol.acceptHttp10 }}
                default_host_for_http_10: {{ include "mimir-envoy.fullname" . | quote }}
              # ðŸ”§ FIX: Add timeouts to prevent hanging requests and buffer issues
              request_timeout: {{ .Values.extAuthz.timeout | default "10s" }}
              stream_idle_timeout: 300s
              # Enable proper handling of forwarded headers from NGINX
              use_remote_address: {{ .Values.proxy.httpProtocol.useRemoteAddress }}
              xff_num_trusted_hops: {{ .Values.proxy.httpProtocol.xffNumTrustedHops | int }}
              # ðŸ”§ DEBUG: Enhanced access logs for detailed troubleshooting
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  log_format:
                    text_format: |
                      [%START_TIME%] ENVOY_ACCESS: "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                      %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                      %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                      "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                      tenant="%REQ({{ .Values.tenantHeader }})%" 
                      ext_authz_status="%DYNAMIC_METADATA(envoy.filters.http.ext_authz:status)%"
                      ext_authz_denied="%DYNAMIC_METADATA(envoy.filters.http.ext_authz:denied)%"
                      ext_authz_failure_reason="%DYNAMIC_METADATA(envoy.filters.http.ext_authz:failure_reason)%"
              http_filters:
              # ðŸ”§ FIX: Re-enabled ext_authz filter with improved gRPC configuration
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  with_request_body:
                    max_request_bytes: {{ .Values.extAuthz.maxRequestBytes | int }}
                    allow_partial_message: true
                  failure_mode_allow: {{ .Values.extAuthz.failureModeAllow }}
                  include_peer_certificate: true
                  metadata_context_namespaces:
                  - "envoy.filters.http.ext_authz"
                  status_on_error:
                    code: 500
                  grpc_service:
                    envoy_grpc:
                      cluster_name: rls_ext_authz
                      authority: "{{ .Values.rls.host }}:{{ .Values.rls.extAuthzPort }}"
                    timeout: {{ .Values.extAuthz.timeout | default "5s" }}
              # ðŸ”§ FIX: Re-enabled rate limit filter with improved gRPC configuration
              - name: envoy.filters.http.ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                  domain: {{ .Values.rateLimit.domain }}
                  rate_limit_service:
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: rls_ratelimit
                      timeout: {{ .Values.rateLimit.grpcTimeout | default "2s" }}
                  failure_mode_deny: {{ .Values.rateLimit.failureModeDeny }}
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  dynamic_stats: true
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  # ðŸ”§ FIX: Remote write endpoint (metrics ingestion)
                  - match:
                      prefix: "{{ .Values.remoteWrite.path }}"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  # ðŸ”§ FIX: Prometheus query endpoints (read operations)
                  - match:
                      prefix: "/prometheus/api/v1/query"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/prometheus/api/v1/query_range"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/prometheus/api/v1/series"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/prometheus/api/v1/labels"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/prometheus/api/v1/label"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  # ðŸ”§ FIX: Mimir admin endpoints
                  - match:
                      prefix: "/api/v1/status"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/api/v1/rules"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/api/v1/alerts"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  # ðŸ”§ FIX: Health check endpoints
                  - match:
                      prefix: "/ready"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  - match:
                      prefix: "/healthy"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
                  
                  # ðŸ”§ DEBUG: Debug endpoint for troubleshooting
                  - match:
                      prefix: "/debug"
                    direct_response:
                      status: 200
                      body:
                        inline_string: |
                          Envoy Debug Info:
                          - Remote Write Path: {{ .Values.remoteWrite.path }}
                          - RLS Host: {{ .Values.rls.host }}:{{ .Values.rls.extAuthzPort }}
                          - Mimir Host: {{ .Values.mimir.distributorHost }}:{{ .Values.mimir.distributorPort }}
                          - Failure Mode Allow: {{ .Values.extAuthz.failureModeAllow }}
                          - Ext Authz Timeout: {{ .Values.extAuthz.timeout }}
                          - Ext Authz Filter: ENABLED (gRPC Fixed)
                          - Rate Limit Filter: ENABLED (gRPC Fixed)
                          - Configured Routes:
                            * {{ .Values.remoteWrite.path }} (Remote Write)
                            * /prometheus/api/v1/query* (Prometheus Queries)
                            * /api/v1/status* (Mimir Admin)
                            * /ready, /healthy (Health Checks)
                            * / (Catch-all for other endpoints)
                  
                  # ðŸ”§ FIX: Catch-all route for other Mimir endpoints (must be last)
                  - match:
                      prefix: "/"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}


      clusters:
      - name: mimir_distributor
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        # ðŸ”§ FIX: Use HTTP/1.1 for Mimir distributor (most Mimir deployments use HTTP/1.1)
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http_protocol_options: {}  # HTTP/1.1
        # ðŸ”§ FIX: Add health checks for Mimir distributor
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: "/ready"
            expected_statuses:
            - start: 200
              end: 299
        # ðŸ”§ FIX: Configure connection pool and circuit breakers for reliability
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 100
            max_pending_requests: 50
            max_requests: 200
            max_retries: 3
        load_assignment:
          cluster_name: mimir_distributor
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.mimir.distributorHost }}
                    port_value: {{ .Values.mimir.distributorPort | int }}

      - name: rls_ext_authz
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        # ðŸ”§ DEBUG: Enhanced RLS cluster configuration for detailed debugging
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: 
                # ðŸ”§ DEBUG: Configure HTTP/2 settings for better gRPC performance
                max_concurrent_streams: 100
                # ðŸ”§ DEBUG: Add more detailed HTTP/2 settings
                initial_stream_window_size: 65536
                initial_connection_window_size: 1048576

        # ðŸ”§ DEBUG: Enhanced health checks for RLS service debugging
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          grpc_health_check:
            service_name: "envoy.service.auth.v3.Authorization"
        # ðŸ”§ FIX: Configure connection pool for better reliability
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 100
            max_pending_requests: 50
            max_requests: 200
            max_retries: 3
        load_assignment:
          cluster_name: rls_ext_authz
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.rls.host }}
                    port_value: {{ .Values.rls.extAuthzPort | int }}

      - name: rls_ratelimit
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        # ðŸ”§ FIX: Properly configure HTTP/2 for gRPC communication to RLS
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options:
                # ðŸ”§ FIX: Configure HTTP/2 settings for better gRPC performance
                max_concurrent_streams: 100
                initial_stream_window_size: 65536
                initial_connection_window_size: 1048576
        # ðŸ”§ FIX: Add gRPC health checks for RLS rate limit service
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          grpc_health_check:
            service_name: "envoy.service.ratelimit.v3.RateLimitService"
        # ðŸ”§ FIX: Configure connection pool for better reliability
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 50
            max_pending_requests: 25
            max_requests: 100
            max_retries: 3
        load_assignment:
          cluster_name: rls_ratelimit
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.rls.host }}
                    port_value: {{ .Values.rls.rateLimitPort | int }}
{{- end }} 