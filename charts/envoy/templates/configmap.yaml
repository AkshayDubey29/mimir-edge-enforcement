{{- if .Values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mimir-envoy.fullname" . }}-config
  labels:
    {{- include "mimir-envoy.labels" . | nindent 4 }}
data:
  envoy.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
      access_log:
        - name: envoy.access_loggers.stdout
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
            log_format:
              text_format: "[%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_SENT% %DURATION% %REQ(X-FORWARDED-FOR)% %REQ(USER-AGENT)% %REQ(X-REQUEST-ID)% %REQ(:AUTHORITY)% %UPSTREAM_HOST%\n"

    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.service.port }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "{{ .Values.remoteWrite.path }}"
                    route:
                      cluster: mimir_distributor
                      timeout: {{ .Values.proxy.upstreamTimeout }}
              http_filters:
              - name: envoy.filters.http.ext_authz
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                  transport_api_version: V3
                  with_request_body:
                    max_request_bytes: {{ .Values.extAuthz.maxRequestBytes }}
                    allow_partial_message: true
                  failure_mode_allow: {{ .Values.extAuthz.failureModeAllow }}
                  grpc_service:
                    envoy_grpc:
                      cluster_name: rls_ext_authz
              - name: envoy.filters.http.ratelimit
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                  domain: {{ .Values.rateLimit.domain }}
                  rate_limit_service:
                    transport_api_version: V3
                    grpc_service:
                      envoy_grpc:
                        cluster_name: rls_ratelimit
                  failure_mode_deny: {{ .Values.rateLimit.failureModeDeny }}
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  dynamic_stats: true

      clusters:
      - name: mimir_distributor
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: mimir_distributor
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.mimir.distributorHost }}
                    port_value: {{ .Values.mimir.distributorPort }}

      - name: rls_ext_authz
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: rls_ext_authz
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.rls.host }}
                    port_value: {{ .Values.rls.extAuthzPort }}

      - name: rls_ratelimit
        connect_timeout: 0.25s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        load_assignment:
          cluster_name: rls_ratelimit
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.rls.host }}
                    port_value: {{ .Values.rls.rateLimitPort }}
{{- end }} 