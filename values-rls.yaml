# RLS (Rate Limit Service) Values - Production Configuration
# Use this file for deploying RLS in production with optimized settings

# Service configuration
service:
  type: ClusterIP
  port: 8082  # Main service port (admin API)
  ports:
    extAuthz: 8080
    rateLimit: 8081
    admin: 8082
    metrics: 9090

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Limits configuration - Production
# SELECTIVE ENFORCEMENT: Only enforce cardinality limits (per_metric_series_limit and per_user_series_limit)
limits:
  maxRequestBytes: "10485760"  # 10 MiB - Increased for large Alloy payloads
  maxBodyBytes: 0              # 0 = Disabled - No body size enforcement
  failureModeAllow: true       # Production: Allow requests when parsing fails (with limit enforcement)
  defaultSamplesPerSecond: 0   # 0 = Disabled - No rate limiting enforcement
  defaultBurstPercent: 0       # 0 = Disabled - No burst allowance needed
  enforceBodyParsing: true     # Production: Enable body parsing for cardinality analysis
  defaultMaxLabelsPerSeries: 60      # per_user_series_limit - ENFORCED
  defaultMaxLabelValueLength: 2048   # per_user_series_limit - ENFORCED
  defaultMaxSeriesPerRequest: 10000  # per_metric_series_limit - ENFORCED

# Selective Enforcement Configuration
# Only enforce cardinality limits, disable rate limiting and body size limits
enforcement:
  enabled: true
  # Cardinality limits - ENFORCED
  enforceMaxSeriesPerRequest: true   # per_metric_series_limit
  enforceMaxLabelsPerSeries: true    # per_user_series_limit
  # Rate limiting - DISABLED
  enforceSamplesPerSecond: false     # No rate limiting
  enforceBytesPerSecond: false       # No bytes rate limiting
  # Body size - DISABLED
  enforceMaxBodyBytes: false         # No body size enforcement

# Store configuration
store:
  backend: "memory"  # memory or redis

# Logging configuration - Production
log:
  level: "info"  # Production: Info level for performance
  enableGRPCLogs: false  # Production: Disable gRPC logs for performance
  enableDetailedLogs: false  # Production: Disable detailed logs for performance

# Deployment configuration
replicaCount: 1

image:
  repository: ghcr.io/akshaydubey29/mimir-rls
  tag: "latest-cardinality-enforcement-arm64"  # Production: Use the latest cardinality enforcement ARM64 image
  pullPolicy: IfNotPresent  # Production: Use IfNotPresent for efficiency

# Resource configuration - Production
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Service Account
serviceAccount:
  create: true
  annotations: {}

# Pod annotations - Production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Service Monitor for Prometheus - Production
serviceMonitor:
  enabled: false  # Disable ServiceMonitor for local testing
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

# Image pull secrets
imagePullSecrets: []
