# RLS (Rate Limit Service) Values with Debugging Configuration
# Use this file for deploying RLS with enhanced debugging and monitoring

# Service configuration
service:
  type: ClusterIP
  ports:
    extAuthz: 8080
    rateLimit: 8081
    admin: 8082
    metrics: 9090

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Limits configuration with debugging
limits:
  # ðŸ”§ DEBUG: Fixed maxRequestBytes to prevent scientific notation error
  maxRequestBytes: "4194304"  # 4 MiB - quoted string to force literal value
  maxBodyBytes: 0             # 0 means no default body size cap
  failureModeAllow: true      # ðŸ”§ DEBUG: Set to true to allow requests when gRPC fails
  defaultSamplesPerSecond: 10000  # ðŸ”§ DEBUG: Set default rate limit for testing
  defaultBurstPercent: 0.2    # ðŸ”§ DEBUG: Set default burst allowance
  enforceBodyParsing: true    # parsing enabled for metrics/visibility
  defaultMaxLabelsPerSeries: 60
  defaultMaxLabelValueLength: 2048
  defaultMaxSeriesPerRequest: 100000

# Store configuration
store:
  backend: "memory"  # memory or redis

# ðŸ”§ DEBUG: Enhanced logging for troubleshooting
log:
  level: "debug"  # Set to debug for troubleshooting
  enableGRPCLogs: true  # ðŸ”§ DEBUG: Enable gRPC request/response logs
  enableDetailedLogs: true  # ðŸ”§ DEBUG: Enable detailed operation logs

# Deployment configuration
replicaCount: 1

image:
  repository: ghcr.io/akshaydubey29/mimir-rls
  tag: "latest"
  pullPolicy: IfNotPresent

# ðŸ”§ DEBUG: Enhanced resource configuration for debugging
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Service Account
serviceAccount:
  create: true
  annotations: {}

# Pod annotations for debugging
podAnnotations:
  debug: "true"
  logging: "debug"
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false  # ðŸ”§ DEBUG: Disabled for testing without Prometheus Operator
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

# Image pull secrets
imagePullSecrets: []
