# NGINX Canary Configuration for Mimir Edge Enforcement
# This configuration implements weighted traffic splitting to Envoy

# Upstream definitions
upstream mimir_distributor {
    server mimir-distributor.mimir.svc.cluster.local:8080;
}

upstream mimir_envoy {
    server mimir-envoy.mimir-edge-enforcement.svc.cluster.local:8080;
}

# Split clients configuration
split_clients "${remote_addr}${request_uri}" $backend {
    5%     mimir_envoy;      # 5% traffic to Envoy
    95%    mimir_distributor; # 95% traffic to Mimir distributor
}

# Main server block
server {
    listen 80;
    server_name _;

    # Main location for remote write with traffic splitting
    location /api/v1/push {
        # Use split_clients to route traffic
        proxy_pass http://$backend;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings for large requests
        proxy_request_buffering off;
        proxy_buffering off;
        
        # Pass through tenant header
        proxy_set_header X-Scope-OrgID $http_x_scope_orgid;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }

    # Fallback location (direct to Mimir distributor)
    location @fallback {
        proxy_pass http://mimir_distributor;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_request_buffering off;
        proxy_buffering off;
        
        # Pass through tenant header
        proxy_set_header X-Scope-OrgID $http_x_scope_orgid;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Traffic split status endpoint
    location /split-status {
        access_log off;
        return 200 "Canary: 5% to Envoy, 95% to Mimir\n";
        add_header Content-Type text/plain;
    }
}

# Alternative configuration using map for more complex routing
# Uncomment and modify as needed

# map $http_x_scope_orgid $canary_tenant {
#     "~^prod-" 0;        # Production tenants: 0% to canary
#     "~^staging-" 50;    # Staging tenants: 50% to canary
#     "~^dev-" 100;       # Development tenants: 100% to canary
#     default 5;          # Default: 5% to canary
# }
# 
# map $canary_tenant $backend {
#     0 mimir_distributor;
#     default mimir_envoy;
# } 