// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: protos/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_SetLimits_FullMethodName        = "/admin.AdminService/SetLimits"
	AdminService_GetLimits_FullMethodName        = "/admin.AdminService/GetLimits"
	AdminService_ListTenants_FullMethodName      = "/admin.AdminService/ListTenants"
	AdminService_GetHealth_FullMethodName        = "/admin.AdminService/GetHealth"
	AdminService_GetOverview_FullMethodName      = "/admin.AdminService/GetOverview"
	AdminService_GetTenantDetails_FullMethodName = "/admin.AdminService/GetTenantDetails"
	AdminService_SetEnforcement_FullMethodName   = "/admin.AdminService/SetEnforcement"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	SetLimits(ctx context.Context, in *SetLimitsRequest, opts ...grpc.CallOption) (*SetLimitsResponse, error)
	GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
	GetOverview(ctx context.Context, in *GetOverviewRequest, opts ...grpc.CallOption) (*GetOverviewResponse, error)
	GetTenantDetails(ctx context.Context, in *GetTenantDetailsRequest, opts ...grpc.CallOption) (*GetTenantDetailsResponse, error)
	SetEnforcement(ctx context.Context, in *SetEnforcementRequest, opts ...grpc.CallOption) (*SetEnforcementResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) SetLimits(ctx context.Context, in *SetLimitsRequest, opts ...grpc.CallOption) (*SetLimitsResponse, error) {
	out := new(SetLimitsResponse)
	err := c.cc.Invoke(ctx, AdminService_SetLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*GetLimitsResponse, error) {
	out := new(GetLimitsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, AdminService_GetHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOverview(ctx context.Context, in *GetOverviewRequest, opts ...grpc.CallOption) (*GetOverviewResponse, error) {
	out := new(GetOverviewResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTenantDetails(ctx context.Context, in *GetTenantDetailsRequest, opts ...grpc.CallOption) (*GetTenantDetailsResponse, error) {
	out := new(GetTenantDetailsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetTenantDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetEnforcement(ctx context.Context, in *SetEnforcementRequest, opts ...grpc.CallOption) (*SetEnforcementResponse, error) {
	out := new(SetEnforcementResponse)
	err := c.cc.Invoke(ctx, AdminService_SetEnforcement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	SetLimits(context.Context, *SetLimitsRequest) (*SetLimitsResponse, error)
	GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	GetOverview(context.Context, *GetOverviewRequest) (*GetOverviewResponse, error)
	GetTenantDetails(context.Context, *GetTenantDetailsRequest) (*GetTenantDetailsResponse, error)
	SetEnforcement(context.Context, *SetEnforcementRequest) (*SetEnforcementResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) SetLimits(context.Context, *SetLimitsRequest) (*SetLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLimits not implemented")
}
func (UnimplementedAdminServiceServer) GetLimits(context.Context, *GetLimitsRequest) (*GetLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (UnimplementedAdminServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedAdminServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedAdminServiceServer) GetOverview(context.Context, *GetOverviewRequest) (*GetOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverview not implemented")
}
func (UnimplementedAdminServiceServer) GetTenantDetails(context.Context, *GetTenantDetailsRequest) (*GetTenantDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDetails not implemented")
}
func (UnimplementedAdminServiceServer) SetEnforcement(context.Context, *SetEnforcementRequest) (*SetEnforcementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnforcement not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_SetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetLimits(ctx, req.(*SetLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLimits(ctx, req.(*GetLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOverview(ctx, req.(*GetOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTenantDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTenantDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetTenantDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTenantDetails(ctx, req.(*GetTenantDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetEnforcement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetEnforcement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetEnforcement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetEnforcement(ctx, req.(*SetEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLimits",
			Handler:    _AdminService_SetLimits_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _AdminService_GetLimits_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _AdminService_ListTenants_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _AdminService_GetHealth_Handler,
		},
		{
			MethodName: "GetOverview",
			Handler:    _AdminService_GetOverview_Handler,
		},
		{
			MethodName: "GetTenantDetails",
			Handler:    _AdminService_GetTenantDetails_Handler,
		},
		{
			MethodName: "SetEnforcement",
			Handler:    _AdminService_SetEnforcement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/admin/admin.proto",
}
