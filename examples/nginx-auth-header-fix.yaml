apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config-with-auth-fix
  namespace: mimir
data:
  nginx.conf: |
    # NGINX Configuration with Authorization Header Fix for Canary Routing
    # ===================================================================
    
    # Hash-based canary routing (10% traffic to edge enforcement)
    map $request_id $canary_hash {
        default 0;
        ~^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ 1;
    }
    
    map $canary_hash $route_decision {
        0 direct;
        1 edge;
    }
    
    # Upstream definitions
    upstream mimir_direct {
        server distributor.mimir.svc.cluster.local:8080;
    }
    
    upstream mimir_via_edge_enforcement {
        server mimir-envoy.mimir-edge-enforcement.svc.cluster.local:8080;
    }
    
    server {
        listen 80;
        server_name _;
        
        # ðŸ”§ CRITICAL FIX: Preserve Authorization headers for all routes
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Request-ID $request_id;
        
        # Authentication configuration
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        # API endpoint with canary routing
        location /api/v1/push {
            # Set target upstream based on canary decision
            set $target_upstream mimir_direct;
            if ($route_decision = "edge") {
                set $target_upstream mimir_via_edge_enforcement;
            }
            
            # ðŸ”§ CRITICAL: Ensure Authorization header is forwarded
            proxy_set_header Authorization $http_authorization;
            
            # Additional headers for observability
            proxy_set_header X-Canary-Route $route_decision;
            proxy_set_header X-Route-Decision "canary=$route_decision,hash=$canary_hash";
            
            # Proxy to selected upstream
            proxy_pass http://$target_upstream;
            
            # Standard proxy settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # Distributor endpoint (same canary logic)
        location /distributor {
            # Set target upstream based on canary decision
            set $target_upstream mimir_direct;
            if ($route_decision = "edge") {
                set $target_upstream mimir_via_edge_enforcement;
            }
            
            # ðŸ”§ CRITICAL: Ensure Authorization header is forwarded
            proxy_set_header Authorization $http_authorization;
            
            # Additional headers for observability
            proxy_set_header X-Canary-Route $route_decision;
            proxy_set_header X-Route-Decision "canary=$route_decision,hash=$canary_hash";
            
            # Proxy to selected upstream
            proxy_pass http://$target_upstream;
            
            # Standard proxy settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # Health check endpoint (no auth required)
        location /health {
            auth_basic off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Emergency endpoints for direct access
        location /emergency/direct {
            auth_basic "Emergency Direct Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_set_header Authorization $http_authorization;
            proxy_pass http://mimir_direct;
        }
        
        location /emergency/edge {
            auth_basic "Emergency Edge Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_set_header Authorization $http_authorization;
            proxy_pass http://mimir_via_edge_enforcement;
        }
    }
