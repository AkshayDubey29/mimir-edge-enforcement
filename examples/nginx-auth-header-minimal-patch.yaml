apiVersion: v1
data:
  nginx.conf: |
    worker_processes 5;  ## Default: 1
    error_log /dev/stderr;
    pid /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
        worker_connections 6006;  ## Default: 1024
    }

    http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path /tmp/proxy_temp_path;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;

        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;

        default_type application/octet-stream;
        log_format main '$remote_addr - $remote_user [$time_local]  $status '
                        '"$request" $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" [$http_x_boltx_cluster]';
        access_log /dev/stderr main;

        sendfile on;
        tcp_nopush on;
        resolver kube-dns.kube-system.svc.cluster.local;

        map "$remote_user:$http_user_agent" $block_agent {
            default 0;
            "boltx:Go-http-client/1.1" 1;
            "boltx:okhttp/4.12.0" 1;
        }

        server {
            listen 8080;
            auth_basic "Mimir";
            proxy_set_header X-Scope-OrgID $remote_user;
            auth_basic_user_file /etc/nginx/secrets/.htpasswd;

            # ðŸ”§ CRITICAL FIX: Preserve Authorization headers for all routes
            proxy_set_header Authorization $http_authorization;

            location = / {
                return 200 'OK';
                auth_basic off;
            }

            location /runtime_config {
                proxy_pass http://distributor.mimir.svc.cluster.local:8080$request_uri;
            }

            location ~ /service/([^/]+)/ {
                proxy_pass http://$1.mimir.svc.cluster.local:8080/$2;
            }

            # Zone Ingesters Router
            location ~ /status/ingester-zone-(.*)/(.*) {
                proxy_pass http://ingester-zone-$1.mimir.svc.cluster.local:8080/ingester/$2;
            }
            location ~ /status/store-gateway-zone-(.*)/(.*) {
                proxy_pass http://store-gateway-zone-$1.mimir.svc.cluster.local:8080/store-gateway/$2;
            }

            # Distributor endpoints
            location /distributor {
                proxy_pass http://distributor.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /api/v1/push {
                proxy_pass http://distributor.mimir.svc.cluster.local:8080$request_uri;
            }

            # Alertmanager endpoints
            location /alertmanager {
                proxy_pass http://alertmanager.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /multitenant_alertmanager/status {
                proxy_pass http://alertmanager.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /api/v1/alerts {
                proxy_pass http://alertmanager.mimir.svc.cluster.local:8080$request_uri;
            }

            # Ruler endpoints
            location /prometheus/config/v1/rules {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location /prometheus/api/v1/rules {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /api/v1/rules {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location /prometheus/api/v1/rules {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /prometheus/rules {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /ruler/ring {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }
            location = /ruler/rule_groups {
                proxy_pass http://ruler.mimir.svc.cluster.local:8080$request_uri;
            }

            # Rest of /prometheus goes to the query frontend
            location /prometheus {
                if ($block_agent) {
                    return 403;
                }
                proxy_pass http://query-frontend.mimir.svc.cluster.local:8080$request_uri;
            }
        }
    }
kind: ConfigMap
metadata:
  name: mimir-nginx
  namespace: mimir
