# Admin UI with Ingress (recommended for production)
# Use this with nginx-ingress, traefik, or other ingress controllers

replicaCount: 3

image:
  repository: ghcr.io/akshaydubey29/mimir-edge-admin
  tag: "latest"  # ðŸ”´ CHANGE: Use specific SHA in production
  pullPolicy: IfNotPresent

# ClusterIP service (accessed through Ingress)
service:
  type: ClusterIP
  port: 80

# Ingress configuration with SSL and authentication
ingress:
  enabled: true
  className: "nginx"  # ðŸ”´ CHANGE: Your ingress class (nginx, traefik, istio, etc.)
  annotations:
    # SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-rpm: "60"
    
    # Authentication (uncomment for basic auth)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: admin-ui-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Mimir Admin UI"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header Referrer-Policy "no-referrer-when-downgrade" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # CORS (if needed for external access)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # SSL certificate (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # ðŸ”´ CHANGE: Your cert issuer
    
    # Additional security
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"  # ðŸ”§ CUSTOMIZE: Your allowed IP ranges
    
  hosts:
    - host: mimir-admin.your-domain.com  # ðŸ”´ CHANGE: Your domain
      paths:
        - path: /
          pathType: Prefix
          
  tls:
    - secretName: mimir-admin-tls
      hosts:
        - mimir-admin.your-domain.com  # ðŸ”´ CHANGE: Your domain

# Configuration
config:
  environment: "production"
  apiBaseUrl: "http://mimir-rls.mimir-edge-enforcement.svc.cluster.local:8082"  # ðŸ”§ CUSTOMIZE: Your namespace
  serverName: "mimir-admin.your-domain.com"  # ðŸ”´ CHANGE: Your domain
  nginxConfig: true

# Resource configuration
resources:
  limits:
    cpu: 300m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# High availability
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security
securityContext:
  runAsNonRoot: true
  runAsUser: 101
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

# Network policy (ingress controller access)
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx  # ðŸ”§ CUSTOMIZE: Your ingress namespace
      - namespaceSelector:
          matchLabels:
            name: istio-system   # If using Istio
      ports:
      - protocol: TCP
        port: 80
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: mimir-edge-enforcement
      ports:
      - protocol: TCP
        port: 8082
    - to: []  # Allow DNS
      ports:
      - protocol: UDP
        port: 53

# Image pull secrets (if needed)
imagePullSecrets:
  - name: ghcr-secret

# Additional volumes for custom nginx config
volumeMounts: []

volumes: []
