# Production values template for mimir-edge-enforcement
# Copy and customize this file for your environment

# =================================================================
# RLS (Rate Limiting Service) Configuration
# =================================================================
rls:
  replicaCount: 3
  
  image:
    repository: ghcr.io/akshaydubey29/mimir-rls
    tag: "latest"  # ðŸ”´ CHANGE: Use specific SHA in production (e.g., "abc123def")
    pullPolicy: IfNotPresent
  
  # Resource configuration
  resources:
    limits:
      cpu: 1000m      # ðŸ”§ CUSTOMIZE: Based on your load
      memory: 1Gi     # ðŸ”§ CUSTOMIZE: Based on your memory needs
    requests:
      cpu: 500m
      memory: 512Mi
  
  # Auto-scaling
  hpa:
    enabled: true
    minReplicas: 3
    maxReplicas: 10   # ðŸ”§ CUSTOMIZE: Max pods for your cluster
    targetCPUUtilizationPercentage: 70
  
  # High availability
  pdb:
    enabled: true
    minAvailable: 2
  
  # Security
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  # Mimir integration
  mimir:
    namespace: "mimir"                    # ðŸ”´ CHANGE: Your Mimir namespace
    overridesConfigMap: "mimir-overrides" # ðŸ”´ CHANGE: Your ConfigMap name
  
  # Default limits (0 = ConfigMap driven)
  defaultSamplesPerSecond: 0
  defaultBurstPercent: 0
  maxBodyBytes: 0
  
  # Logging
  log:
    level: "info"     # ðŸ”§ CUSTOMIZE: debug/info/warn/error
    format: "json"    # json or text
  
  # Monitoring
  metrics:
    enabled: true
    port: 9090
  
  # Network security
  networkPolicy:
    enabled: true
  
  # Image pull secrets (if using private registry)
  imagePullSecrets:
    - name: ghcr-secret

# =================================================================
# Overrides Sync Controller Configuration  
# =================================================================
overridesSync:
  replicaCount: 2  # HA setup for production
  
  image:
    repository: ghcr.io/akshaydubey29/overrides-sync
    tag: "latest"  # ðŸ”´ CHANGE: Use specific SHA in production
    pullPolicy: IfNotPresent
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Controller settings
  mimir:
    namespace: "mimir"                    # ðŸ”´ CHANGE: Your Mimir namespace
    overridesConfigMap: "mimir-overrides" # ðŸ”´ CHANGE: Your ConfigMap name
  
  rls:
    host: "mimir-rls.mimir-edge-enforcement.svc.cluster.local"  # ðŸ”§ CUSTOMIZE: Namespace
    adminPort: "8082"
  
  # Polling configuration
  pollFallbackSeconds: 30  # ðŸ”§ CUSTOMIZE: How often to check ConfigMap
  
  # Security
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  # RBAC
  serviceAccount:
    create: true
    annotations: {}
  
  # High availability (no HPA needed for ConfigMap watchers)
  pdb:
    enabled: true   # âœ… Ensures availability during maintenance
    minAvailable: 1
  
  # Image pull secrets
  imagePullSecrets:
    - name: ghcr-secret

# =================================================================
# Envoy Proxy Configuration
# =================================================================
envoy:
  replicaCount: 3
  
  image:
    repository: ghcr.io/akshaydubey29/mimir-envoy
    tag: "latest"  # ðŸ”´ CHANGE: Use specific SHA in production
    pullPolicy: IfNotPresent
  
  # Resource configuration
  resources:
    limits:
      cpu: 1000m    # ðŸ”§ CUSTOMIZE: Envoy can be CPU intensive
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  
  # Auto-scaling
  hpa:
    enabled: true
    minReplicas: 3
    maxReplicas: 15   # ðŸ”§ CUSTOMIZE: Scale based on traffic
    targetCPUUtilizationPercentage: 80
  
  # High availability
  pdb:
    enabled: true
    minAvailable: 2
  
  # Service configuration
  service:
    type: ClusterIP  # ðŸ”§ CUSTOMIZE: LoadBalancer if direct access needed
    port: 8080
  
  # Mimir distributor (upstream)
  mimir:
    distributorHost: "mimir-distributor.mimir.svc.cluster.local"  # ðŸ”´ CHANGE: Your Mimir service
    distributorPort: 8080
  
  # RLS integration
  rls:
    host: "mimir-rls.mimir-edge-enforcement.svc.cluster.local"  # ðŸ”§ CUSTOMIZE: Namespace
    extAuthzPort: 8080
    rateLimitPort: 8081
  
  # Resource limits and overload management
  resourceLimits:
    maxDownstreamConnections: 25000      # ðŸ”§ CUSTOMIZE: Higher for production
    maxHeapSizeBytes: 838860800          # 800 MiB (for 1Gi container limit)
    disableKeepaliveThreshold: 0.8       # Disable keepalive at 80%
    stopAcceptingRequestsThreshold: 0.95 # Stop accepting at 95%
    shrinkHeapThreshold: 0.8             # Shrink heap at 80%
    heapStopAcceptingThreshold: 0.95     # Stop accepting at 95% heap
  
  # External authorization
  extAuthz:
    maxRequestBytes: 4194304  # 4 MiB - ðŸ”§ CUSTOMIZE: Max request size
    failureModeAllow: false   # ðŸ”´ SECURITY: false = fail closed (recommended)
  
  # Rate limiting
  rateLimit:
    failureModeDeny: true     # ðŸ”´ SECURITY: true = deny on RLS failure (recommended)
  
  # Tenant identification
  tenantHeader: "X-Scope-OrgID"  # ðŸ”§ CUSTOMIZE: Your tenant header
  
  # Remote write path
  remoteWrite:
    path: "/api/v1/push"  # ðŸ”§ CUSTOMIZE: Your Prometheus remote_write path
  
  # Security
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  # Image pull secrets
  imagePullSecrets:
    - name: ghcr-secret

# =================================================================
# Admin UI Configuration (Enabled by default for production)
# =================================================================
adminUI:
  enabled: true  # âœ… ENABLED: Admin UI for monitoring and management
  
  replicaCount: 3  # Production HA setup
  
  image:
    repository: ghcr.io/akshaydubey29/mimir-edge-admin
    tag: "latest"  # ðŸ”´ CHANGE: Use specific SHA in production
    pullPolicy: IfNotPresent
  
  # Resource configuration
  resources:
    limits:
      cpu: 300m      # Increased for production load
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Auto-scaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
  
  # High availability
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    annotations: {}
  
  # Ingress configuration (Production-ready)
  ingress:
    enabled: true   # âœ… ENABLED: External access via Ingress
    className: "nginx"  # ðŸ”´ CHANGE: Your ingress controller class
    annotations:
      # SSL/TLS configuration
      cert-manager.io/cluster-issuer: "letsencrypt-prod"  # ðŸ”§ CUSTOMIZE: Your cert issuer
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      
      # Authentication
      nginx.ingress.kubernetes.io/auth-type: basic        # ðŸ”´ SECURITY: Basic auth enabled
      nginx.ingress.kubernetes.io/auth-secret: admin-ui-auth
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Mimir Admin UI"
      
      # Rate limiting
      nginx.ingress.kubernetes.io/rate-limit-connections: "10"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
      nginx.ingress.kubernetes.io/rate-limit-rpm: "60"
      
      # Security headers
      nginx.ingress.kubernetes.io/configuration-snippet: |
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      
      # IP restrictions (customize for your office/VPN)
      nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"  # ðŸ”§ CUSTOMIZE: Your allowed IP ranges
      
      # CORS (if needed)
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-origin: "*"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
      
    hosts:
      - host: mimir-admin.your-domain.com  # ðŸ”´ CHANGE: Your domain
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: mimir-admin-tls
        hosts:
          - mimir-admin.your-domain.com  # ðŸ”´ CHANGE: Your domain
  
  # Application configuration
  config:
    environment: "production"
    apiBaseUrl: "http://mimir-rls.mimir-edge-enforcement.svc.cluster.local:8082"  # ðŸ”§ CUSTOMIZE: Your namespace
    serverName: "mimir-admin.your-domain.com"  # ðŸ”´ CHANGE: Your domain
    nginxConfig: true
  
  # Security hardening
  securityContext:
    runAsNonRoot: true
    runAsUser: 101  # nginx user
    runAsGroup: 101
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 101
    runAsGroup: 101
    fsGroup: 101
  
  # Network policy
  networkPolicy:
    enabled: true
    ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx  # ðŸ”§ CUSTOMIZE: Your ingress namespace
        ports:
        - protocol: TCP
          port: 80
    egress:
      - to:
        - namespaceSelector:
            matchLabels:
              name: mimir-edge-enforcement
        ports:
        - protocol: TCP
          port: 8082
      - to: []  # Allow DNS
        ports:
        - protocol: UDP
          port: 53
  
  # Image pull secrets
  imagePullSecrets:
    - name: ghcr-secret

# =================================================================
# Global Configuration
# =================================================================
global:
  # Container registry credentials
  imageCredentials:
    registry: ghcr.io
    username: ""        # ðŸ”´ CHANGE: Your GitHub username
    password: ""        # ðŸ”´ CHANGE: Your GitHub token (use secret in production)
    email: ""           # ðŸ”´ CHANGE: Your email
  
  # Cluster-specific settings
  cluster:
    name: "production"  # ðŸ”§ CUSTOMIZE: Your cluster name
    region: "us-west-2" # ðŸ”§ CUSTOMIZE: Your region
  
  # Monitoring
  monitoring:
    enabled: true
    namespace: "monitoring"  # ðŸ”§ CUSTOMIZE: Your monitoring namespace
  
  # Security
  security:
    networkPolicies: true
    podSecurityStandards: true

# =================================================================
# Environment-specific overrides
# =================================================================

# Example staging overrides:
# staging:
#   rls:
#     replicaCount: 1
#     resources:
#       limits:
#         cpu: 500m
#         memory: 512Mi
#   envoy:
#     replicaCount: 2
#   adminUI:
#     enabled: true

# Example development overrides:
# development:
#   rls:
#     replicaCount: 1
#     log:
#       level: "debug"
#   envoy:
#     replicaCount: 1
#   adminUI:
#     enabled: true
#     ingress:
#       annotations:
#         nginx.ingress.kubernetes.io/auth-type: ""  # No auth for dev
