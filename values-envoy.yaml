# Envoy Proxy Values - Production Configuration
# Use this file for deploying Envoy in production with optimized settings

# Deployment configuration
replicaCount: 10  # Production: Multiple replicas for high availability

nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  port: 8080
  type: ClusterIP
  annotations: {}

# Remote write configuration
remoteWrite:
  path: "/api/v1/push"

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Mimir distributor configuration
mimir:
  distributorHost: "mimir-distributor.mimir.svc.cluster.local"
  distributorPort: 8080

# RLS service configuration
rls:
  host: "mimir-rls.mimir-edge-enforcement.svc.cluster.local"
  extAuthzPort: 8080
  rateLimitPort: 8081

# External authorization configuration - Production Optimized
extAuthz:
  maxRequestBytes: 52428800   # 50 MiB - Production: Increased for large payloads
  failureModeAllow: true      # Allow on failure for reliability
  timeout: "10s"              # Production timeout
  disableBodyParsing: false   # Keep body parsing for limits
  
  # Buffer settings for production processing
  bufferMaxBytes: "52428800"       # 50MB buffer for production
  bufferTimeout: "5s"              # Production buffer timeout
  
  # Retry configuration - Production
  retryOn: "connect-failure,unavailable,resource-exhausted"  # Production retry conditions
  numRetries: 3                    # Production retry count
  retryBackoffBaseInterval: "100ms" # Production retry interval
  
  # Performance optimizations - Production
  includePeerCertificate: false    # Disable for performance
  includeTlsSession: false         # Disable for performance

# Rate limiting configuration - Production Optimized
rateLimit:
  failureModeDeny: true     # Deny requests when rate limit service fails
  domain: "mimir_remote_write"
  grpcTimeout: "5s"         # Production timeout
  timeout: "2s"             # Production timeout

# Proxy configuration - Production Optimized
proxy:
  upstreamTimeout: "30s"  # Production timeout for metric payloads
  httpProtocol:
    acceptHttp10: true
    useRemoteAddress: true
    xffNumTrustedHops: 1

# Load balancing configuration - Production Optimized
loadBalancer:
  policy: "least_request"        # Least request for better distribution
  healthCheck:
    enabled: true
    interval: "10s"              # Production health checks
    timeout: "2s"                # Production timeout
    unhealthyThreshold: 3        # Production failure detection
    healthyThreshold: 2          # Production recovery

# Logging configuration - Production
logging:
  level: "info"                  # Production logging level
  enableAccessLogs: true         # Enable access logs for monitoring
  enableDebugLogs: false         # Disable debug logging for performance
  enableDetailedLogs: false      # Disable detailed logs for performance

# Resource limits and overload management
resourceLimits:
  maxHeapSizeBytes: 6442450944  # 6 GiB (75% of 8Gi container limit) - Production optimized
  shrinkHeapThreshold: 0.8       # Start shrinking heap at 80%
  heapStopAcceptingThreshold: 0.95  # Stop accepting at 95% heap

# Image configuration
image:
  repository: ghcr.io/akshaydubey29/mimir-envoy
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations - Production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9901"
  prometheus.io/path: "/stats/prometheus"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Resource configuration - PRODUCTION HIGH SCALE
resources:
  limits:
    cpu: 2000m    # Production: 2 cores for high scale processing
    memory: 8Gi   # Production: 8GB memory limit for large payloads
  requests:
    cpu: 500m     # Production: 0.5 cores minimum
    memory: 4Gi   # Production: 4GB memory request for high scale

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity - Production ready
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - mimir-envoy
        topologyKey: kubernetes.io/hostname

# Horizontal Pod Autoscaler - PRODUCTION HIGH SCALE
hpa:
  enabled: true
  minReplicas: 10    # Production: Minimum 10 replicas for high availability
  maxReplicas: 40    # Production: Maximum 40 replicas for peak load
  targetCPUUtilizationPercentage: 60    # Production: Lower threshold for faster scaling
  targetMemoryUtilizationPercentage: 60 # Production: Lower threshold for faster scaling

# Pod Disruption Budget - PRODUCTION HIGH SCALE
pdb:
  enabled: true
  minAvailable: 5  # Production: Ensure at least 5 pods are always available

# Service Monitor for Prometheus - Production
serviceMonitor:
  enabled: true   # Production: Enable for monitoring
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

# ConfigMap configuration
configMap:
  create: true

# Volume mounts and volumes
volumeMounts: []
volumes: []

# Liveness and readiness probes - Production
livenessProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 60  # Production: Longer initial delay for large pods
  periodSeconds: 30        # Production: Less frequent checks
  timeoutSeconds: 10       # Production: Longer timeout
  failureThreshold: 5      # Production: More failures before restart

readinessProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 30  # Production: Longer initial delay
  periodSeconds: 15        # Production: More frequent readiness checks
  timeoutSeconds: 8        # Production: Longer timeout
  failureThreshold: 3      # Production: Fewer failures before marking not ready
  successThreshold: 2      # Production: Require 2 successful checks before ready

# Startup probe - PRODUCTION OPTIMIZED
startupProbe:
  httpGet:
    path: /ready
    port: admin
  initialDelaySeconds: 30  # Production: Longer initial delay
  periodSeconds: 15        # Production: Less frequent during startup
  timeoutSeconds: 10       # Production: Longer timeout during startup
  failureThreshold: 30     # Production: 7.5 minutes total startup time
