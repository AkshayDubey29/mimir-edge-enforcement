# Envoy Proxy Values - Production Configuration
# Use this file for deploying Envoy in production with optimized settings

# Deployment configuration
replicaCount: 1

nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  port: 8080
  type: ClusterIP
  annotations: {}

# Remote write configuration
remoteWrite:
  path: "/api/v1/push"

# Tenant identification
tenantHeader: "X-Scope-OrgID"

# Mimir distributor configuration
mimir:
  distributorHost: "mock-mimir-distributor.mimir.svc.cluster.local"
  distributorPort: 8080

# RLS service configuration
rls:
  host: "mimir-rls.default.svc.cluster.local"
  extAuthzPort: 8080
  rateLimitPort: 8081

# External authorization configuration - Production
# Configured for cardinality enforcement (per_metric_series_limit and per_user_series_limit)
extAuthz:
  maxRequestBytes: 10485760  # 10 MiB - Increased for large Alloy payloads
  failureModeAllow: false    # Production: Deny requests when gRPC fails (SECURITY)
  timeout: "5s"              # Production: Optimized timeout
  disableBodyParsing: false  # Production: Enable body parsing for cardinality analysis

# Rate limiting configuration - Production
rateLimit:
  failureModeDeny: false    # Production: Allow requests when rate limit service fails
  domain: "mimir_remote_write"
  grpcTimeout: "3s"         # Production: Optimized timeout

# Proxy configuration - Production
proxy:
  upstreamTimeout: "30s"  # Production: Optimized timeout for metric payloads
  httpProtocol:
    acceptHttp10: true
    useRemoteAddress: true
    xffNumTrustedHops: 1

# Logging configuration - Production
logging:
  level: "info"                 # Production: Info level for performance
  enableAccessLogs: true        # Production: Enable HTTP access logs
  enableDebugLogs: false        # Production: Disable debug logging for performance
  enableDetailedLogs: false     # Production: Disable detailed logs for performance

# Resource limits and overload management
resourceLimits:
  maxHeapSizeBytes: 402653184  # 384 MiB (75% of 512Mi container limit)
  shrinkHeapThreshold: 0.8     # Start shrinking heap at 80%
  heapStopAcceptingThreshold: 0.95  # Stop accepting at 95% heap

# Image configuration
image:
  repository: ghcr.io/akshaydubey29/mimir-envoy
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations - Production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9901"
  prometheus.io/path: "/stats/prometheus"

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Resource configuration - Production
resources:
  limits:
    cpu: 2000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Service Monitor for Prometheus - Production
serviceMonitor:
  enabled: true   # Production: Enable for monitoring
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

# ConfigMap configuration
configMap:
  create: true

# Volume mounts and volumes
volumeMounts: []
volumes: []
